{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Probabilistic Forecasting at Scale with Numpyro\n",
        "format:\n",
        "  poster-typst: \n",
        "    size: \"36x24\"\n",
        "    poster-authors: \"Juan Orduz\"\n",
        "    departments: \"PyMC Labs\"\n",
        "    institution-logo: \"./images/numpyro.png\"\n",
        "    footer-text: \"3rd Vienna Workshop on Economic Forecasting 2025\"\n",
        "    footer-url: \"https://juanitorduz.github.io/\"\n",
        "    footer-emails: \"juanitorduz@gmail.com\"\n",
        "    footer-color: \"FFFF00\"\n",
        "    keywords: [\"Probabilistic Models\", \"Forecasting\", \"JAX\", \"NumPyro\"]\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "# JAX and NumPyro\n",
        "\n",
        "> \"JAX is a Python library for accelerator-oriented array computation and program transformation, designed for\n",
        "> high-performance numerical computing and large-scale machine learning.\"\n",
        "\n",
        "> \"NumPyro is a lightweight probabilistic programming library that provides a NumPy backend for Pyro. We rely on JAX\n",
        "> for automatic differentiation and JIT compilation to GPU / CPU.\"\n",
        "\n",
        "# Classical Time Series Models\n",
        "\n",
        "We provide implementation for the most common statistical time series models (exponential smoothing, ARIMAX, Croston's\n",
        "method, TSB and many more) and also state space models.\n",
        "\n",
        "```{.python}\n",
        "# See https://juanitorduz.github.io/exponential_smoothing_numpyro/\n",
        "def level_model(y: Array, future: int = 0) -> None:\n",
        "    t_max = y.shape[0]\n",
        "    # --- Priors ---\n",
        "    ## Level\n",
        "    level_smoothing = numpyro.sample(\n",
        "        \"level_smoothing\", dist.Beta(concentration1=1, concentration0=1)\n",
        "    )\n",
        "    level_init = numpyro.sample(\"level_init\", dist.Normal(loc=0, scale=1))\n",
        "    ## Noise\n",
        "    noise = numpyro.sample(\"noise\", dist.HalfNormal(scale=1))\n",
        "    # --- Transition Function ---\n",
        "    def transition_fn(carry, t):\n",
        "        previous_level = carry\n",
        "        level = jnp.where(\n",
        "            t < t_max,\n",
        "            level_smoothing * y[t] + (1 - level_smoothing) * previous_level,\n",
        "            previous_level,\n",
        "        )\n",
        "        mu = previous_level\n",
        "        pred = numpyro.sample(\"pred\", dist.Normal(loc=mu, scale=noise))\n",
        "        return level, pred\n",
        "    # --- Run Scan ---\n",
        "    with numpyro.handlers.condition(data={\"pred\": y}):\n",
        "        _, preds = scan(transition_fn, level_init, jnp.arange(t_max + future))\n",
        "    # --- Forecast ---\n",
        "    if future > 0:\n",
        "        numpyro.deterministic(\"y_forecast\", preds[-future:])\n",
        "```\n",
        "We can use different inference methods (MCMC, SVI) and different samplers (NUTS, HMC, etc.).\n",
        "\n",
        "# Hierarchical Models\n",
        "\n",
        "- Vectorize the model and add hierarchies to the parameters. \n",
        "- Total flexibility to write custom models.\n",
        "\n",
        "\n",
        "```{tip}\n",
        "We provide a macro to vectorize the model and add hierarchies to the parameters.\n",
        "```\n",
        "\n",
        "\n",
        "![Hierarchical State Space Models](./images/hierarchical_forecasting.png)\n",
        "\n",
        "# Censoring Likelihoods\n",
        "\n",
        "![Censoring Data](./images/censored_data.png)\n",
        "\n",
        "![Censored Data](./images/censored_forecast.png)\n",
        "\n",
        "# Dynamic Models & Calibration\n",
        "\n",
        "![Electricity Demand](./images/electricity_data.png)\n",
        "\n",
        "![Calibrated Gaussian process dynamic latent variable](./images/calibration.png)"
      ],
      "id": "65e4e7ac"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/juanitorduz/Documents/website_projects/.pixi/envs/default/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}