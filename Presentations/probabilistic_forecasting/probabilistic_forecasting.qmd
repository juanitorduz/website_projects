---
title: "Probabilistic Time Series Forecasting"
title-slide-attributes:
  data-background-image: probabilistic_forecasting_files/static/images/availability_tsb_files/availability_tsb_30_0.png
  data-background-size: cover
  data-background-opacity: "0.20"
subtitle: "Opportunities and Applications"
author: 
  - name: Dr. Juan Orduz
    url: https://juanitorduz.github.io/

format:
  revealjs:
    slide-number: true
    html-math-method: mathjax 
    css: probabilistic_forecasting_files/style.css
    logo: probabilistic_forecasting_files/static/images/juanitorduz_logo_small.png
    transition: none
    chalkboard: 
      buttons: false
    preview-links: auto
    theme:
        - white
    highlight-style: github-dark
---

## Outline

::: {.columns}
::: {.column width="50%"}

1. Introduction
2. `Scan` in NumPyro
3. Exponential Smoothing
4. ARIMA
5. Hierarchical Models

:::

::: {.column width="50%"}

6. Intermittent Demand
7. Censored Demand
8. Price Elasticities
8. Prior Model Calibration
9.  References

:::
:::


## Why Probabilistic Forecasting?

::: {.callout-tip appearance="simple"}

::: {.absolute top=100 left=700}
![[NumPyro](https://github.com/pyro-ppl/numpyro) is a lightweight probabilistic programming library that provides a NumPy backend for [Pyro](https://github.com/pyro-ppl/pyro). It relies on [JAX](https://github.com/google/jax) for automatic differentiation and JIT compilation to GPU / CPU.](probabilistic_forecasting_files/static/images/pyro_logo.png){fig-align="center" width="250"}
:::

::: {.absolute top=500 left=700}
![](probabilistic_forecasting_files/static/images/jax_logo.png){fig-align="center" width="250"}
:::

- **Interpretability**
  - Trust on the results

- **Uncertainty quantification**
  - Risk Assessment
  - Decision Making

- **Customization**
  - Feature engineering 
  - Special constraints
  - Calibrate with domain knowledge

- **Scale**
  - Good results on production environments
  - Take advantage of GPU

:::

## Pyro Forecasting Module üî•

![](probabilistic_forecasting_files/static/images/pyro_docs.png){fig-align="center" width="800"}

::: footer
[https://docs.pyro.ai/en/stable/contrib.forecast.html](https://docs.pyro.ai/en/stable/contrib.forecast.html)
:::

##

![](probabilistic_forecasting_files/static/images/kyle_title.png){fig-align="center" width="800"}

![](probabilistic_forecasting_files/static/images/kyle_plot.png){fig-align="center" width="800"}

::: footer
[https://kylejcaron.github.io/posts/censored_demand/2024-02-06-censored-demand.html](https://kylejcaron.github.io/posts/censored_demand/2024-02-06-censored-demand.html)
:::

## NumPyro - SGT Example Model ü´†

![](probabilistic_forecasting_files/static/images/numpyro_sgt_model.png){fig-align="center" width="1000"}

üòÖ ...

::: footer
[https://num.pyro.ai/en/stable/tutorials/time_series_forecasting.html](https://num.pyro.ai/en/stable/tutorials/time_series_forecasting.html)
:::

## Scan ‚≠ê

### An efficient implementation of `for` loops

```{.python}
def scan(f, init, xs):
  """Pure Python implementation of scan.

  Parameters
  ----------
  f : A  a Python function to be scanned.
  init : An initial loop carry value
  xs : The value over which to scan along the leading axis.
  """
  carry = init
  ys = []
  for x in xs:
    carry, y = f(carry, x)
    ys.append(y)
  return carry, np.stack(ys)
```
::: {.callout-tip appearance="simple"}
We need recursive relationships! $y_t \longmapsto y_{t+1}$
:::

## Example: Exponential Smoothing

![](probabilistic_forecasting_files/static/images/exponential_smoothing_numpyro_files/exponential_smoothing_numpyro_16_1.png){fig-align="center" width="1000"}

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: Exponential Smoothing 

$$
\begin{align*}
\hat{y}_{t+h|t} = & \: l_t \\
l_t = & \: \alpha y_t + (1 - \alpha)l_{t-1}
\end{align*}
$$

::: incremental

- $y_t$ is the observed value at time $t$.
- $\hat{y}_{t+h|t}$ is the forecast of the value at time $t+h$ given the information up to time $t$.
- $l_t$ is the level at time $t$.
- $\alpha$ is the smoothing parameter. It is a value between 0 and 1.

:::

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: Exponential Smoothing 

$$
\begin{align*}
\hat{y}_{t+h|t} = & \: l_t \\
l_t = & \: \alpha y_t + (1 - \alpha)l_{t-1}
\end{align*}
$$

```{.python code-line-numbers="|1|2|4-8|10-11|13"}
    def transition_fn(carry, t):
        previous_level = carry

        level = jnp.where(
            t < t_max,
            level_smoothing * y[t] + (1 - level_smoothing) * previous_level,
            previous_level,
        )

        mu = previous_level
        pred = numpyro.sample("pred", dist.Normal(loc=mu, scale=noise))

        return level, pred
```

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: Exponential Smoothing 

```{.python code-line-numbers="|1|2-3|5-13|15-17|19-25|27-29"}
def level_model(y: ArrayLike, future: int = 0) -> None:
    # Get time series length
    t_max = y.shape[0]
    
    # --- Priors ---
    ## Level
    level_smoothing = numpyro.sample(
        "level_smoothing", dist.Beta(concentration1=1, concentration0=1)
    )
    level_init = numpyro.sample("level_init", dist.Normal(loc=0, scale=1))

    ## Noise
    noise = numpyro.sample("noise", dist.HalfNormal(scale=1))

    # --- Transition Function ---
    def transition_fn(carry, t):
        . . .

    # --- Run Scan ---
    with numpyro.handlers.condition(data={"pred": y}):
        _, preds = scan(
            transition_fn,
            level_init,
            jnp.arange(t_max + future),
        )

    # --- Forecast ---
    if future > 0:
        numpyro.deterministic("y_forecast", preds[-future:])
```

## Example: Exponential Smoothing

### Posterior Distribution Parameters

![](probabilistic_forecasting_files/static/images/exponential_smoothing_numpyro_files/exponential_smoothing_numpyro_29_1.png){fig-align="center" width="1000"}

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: Exponential Smoothing

![](probabilistic_forecasting_files/static/images/exponential_smoothing_numpyro_files/exponential_smoothing_numpyro_36_1.png){fig-align="center" width="1000"}

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: Exponential Smoothing

### Trend + Seasonal + Damped

![](probabilistic_forecasting_files/static/images/exponential_smoothing_numpyro_files/exponential_smoothing_numpyro_78_1.png){fig-align="center" width="900"}

::: footer
[Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)
:::

## Example: ARMA(1, 1) Model

```{.python code-line-numbers="|1|2|3-4|5-7"}
    def transition_fn(carry, t):
        y_prev, error_prev = carry
        ar_part = phi * y_prev
        ma_part = theta * error_prev
        pred = mu + ar_part + ma_part
        error = y[t] - pred
        return (y[t], error), error
```

![](probabilistic_forecasting_files/static/images/arma_numpyro_files/arma_numpyro_40_1.png){fig-align="center" width="650"}

::: footer
[Notes on an ARMA(1, 1) Model with NumPyro](https://juanitorduz.github.io/arma_numpyro/)
:::

## Hierarchical Exponential Smoothing

![](probabilistic_forecasting_files/static/images/hierarchical_exponential_smoothing_files/hierarchical_exponential_smoothing_45_0.png){fig-align="center" height="1950"}


## Hierarchical Exponential Smoothing

![](probabilistic_forecasting_files/static/images/hierarchical_exponential_smoothing_files/hierarchical_exponential_smoothing_47_0.png){fig-align="center" width="1000"}

::: footer
[Hierarchical Exponential Smoothing Model](https://juanitorduz.github.io/hierarchical_exponential_smoothing/)
:::

## Hierarchical Exponential Smoothing

![](probabilistic_forecasting_files/static/images/hierarchical_exponential_smoothing_files/hierarchical_exponential_smoothing_69_0.png ){fig-align="center" width="1000"}

::: footer
[Hierarchical Exponential Smoothing Model](https://juanitorduz.github.io/hierarchical_exponential_smoothing/)
:::

## Baseline Model

### Local Level Model + Seasonality + Covariates

![](probabilistic_forecasting_files/static/images/baseline_covariates.png){fig-align="center" width="650"}


::: {.callout-tip appearance="simple"}

- Local level model to capture the trend component.
- Seasonality using a Fourier modes.
- Add covariates to account for promotions and discounts.
- Global factor to account the availability of the product.

**Scalability:** $~40$K time-series can be fitted in less than $10$ minutes in a GPU.

:::

::: footer
[From Pyro to NumPyro: Forecasting Hierarchical Models - Part I](https://juanitorduz.github.io/numpyro_hierarchical_forecasting_1/)
:::

## Intermittent Time Series

![](probabilistic_forecasting_files/static/images/croston_numpyro_files/croston_numpyro_6_1.png){fig-align="center" width="1000"}

::: footer
[Croston's Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/croston_numpyro/)
:::

## Croston's Method

::: {.callout-tip appearance="simple"}

<span style="font-size: 1.4em;">
The method is based on the idea of **separating the demand size $z_t$ and the demand interval $p_t$**, and then **forecasting them separately** using simple exponential smoothing.
</span>

:::

- $z_t$: keep the non-zero values of $y_t$.
- $p_t$: keep the time between non-zero values of $y_t$.

$$
\hat{y}_{t+h} = \frac{\hat{z}_{t+h}}{\hat{p}_{t+h}}
$$

::: footer
[Croston's Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/croston_numpyro/)
:::

## Croston's Method

![](probabilistic_forecasting_files/static/images/croston_numpyro_files/croston_numpyro_10_1.png){fig-align="center" width="1000"}


::: footer
[Croston's Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/croston_numpyro/)
:::

## Croston's Method

```{.python}
def croston_model(z: ArrayLike, p_inv: ArrayLike, future: int = 0) -> None:
    z_forecast = scope(level_model, "demand")(z, future)
    p_inv_forecast = scope(level_model, "period_inv")(p_inv, future)

    if future > 0:
        numpyro.deterministic("z_forecast", z_forecast)
        numpyro.deterministic("p_inv_forecast", p_inv_forecast)
        numpyro.deterministic("forecast", z_forecast * p_inv_forecast)
```

![](probabilistic_forecasting_files/static/images/croston_numpyro_files/croston_numpyro_39_1.png){fig-align="center" width="600"}

::: footer
[Croston's Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/croston_numpyro/)
:::

## TSB Method

::: {.callout-tip appearance="simple"}

<span style="font-size: 1.4em;">
- The TSB method is similar to the Croston‚Äôs method: constructs two different time series out of the original one and then forecast each of them separately, so that the final forecast is generated by combining the forecasts of the two time series.
</span>

<span style="font-size: 1.4em;">
- **The main difference between the two methods is that the TSB method uses the demand probability instead of the demand periods.**
</span>

:::

::: footer
[TSB Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/tsb_numpyro/)
:::

## TSB Method

### 1 - Step Ahead Time Slice Cross Validation

![](probabilistic_forecasting_files/static/images/tsb_numpyro_files/tsb_numpyro_36_1.png){fig-align="center" width="600"}

::: footer
[TSB Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/tsb_numpyro/)
:::

## Zero-Inflated TSB Model

üß™ We can modify the TSB model to include zero-inflation by using a Zero-Inflated Negative Binomial Distribution.

```{.python}
    def transition_fn(carry, t):
        z_prev, p_prev = carry
        
        z_next . . .
        p_next . . .

        mu = z_next
        gate = 1 - p_next
        pred = numpyro.sample(
            "pred",
            dist.ZeroInflatedNegativeBinomial2(
                mean=mu, concentration=concentration, gate=gate
            ),
        )
```

::: footer
[Zero-Inflated TSB Model](https://juanitorduz.github.io/zi_tsb_numpyro/)
:::

## Time-Slice Cross Validation

![](probabilistic_forecasting_files/static/images/zi_tsb_numpyro_files/zi_tsb_numpyro_35_1.png){fig-align="center" width="1000"}

::: footer
[Zero-Inflated TSB Model](https://juanitorduz.github.io/zi_tsb_numpyro/)
:::

## [Why Zeros Happen?](https://openforecast.org/2024/11/18/why-zeroes-happen/)

### Simulation Study: Availability Constrains

![](probabilistic_forecasting_files/static/images/availability_tsb_files/availability_tsb_12_0.png){fig-align="center" width="100"}

::: footer
[Hacking the TSB Model for Intermediate Time Series to Accommodate for Availability Constraints](https://juanitorduz.github.io/availability_tsb/)
:::

## Hacking the TSB Model ü™õ

![](probabilistic_forecasting_files/static/images/availability_tsb_files/availability_tsb_30_0.png){fig-align="center" width="1000"}

::: footer
[Hacking the TSB Model for Intermediate Time Series to Accommodate for Availability Constraints](https://juanitorduz.github.io/availability_tsb/)
:::

## Hacking the TSB Model

![](probabilistic_forecasting_files/static/images/availability_tsb_files/availability_tsb_38_0.png){fig-align="center" width="1000"}

::: footer
[Hacking the TSB Model for Intermediate Time Series to Accommodate for Availability Constraints](https://juanitorduz.github.io/availability_tsb/)
:::

## Forecasting Unseen Demand

![](probabilistic_forecasting_files/static/images/demand_files/demand_8_0.png){fig-align="center" width="1000"}

::: footer
[Demand Forecasting with Censored Likelihood](https://juanitorduz.github.io/demand/)
:::

## ARIMA Model

![](probabilistic_forecasting_files/static/images/demand_files/demand_25_0.png){fig-align="center" width="1000"}

::: footer
[Demand Forecasting with Censored Likelihood](https://juanitorduz.github.io/demand/)
:::

## Censored Distributions

![](probabilistic_forecasting_files/static/images/censoring_files/censoring_5_0.png){fig-align="center" width="1000"}

::: footer
[Bayesian Censoring Data Modeling](https://juanitorduz.github.io/censoring/)
:::

##

![](probabilistic_forecasting_files/static/images/censoring_files/censoring_12_0.png){fig-align="center" width="600"}

![](probabilistic_forecasting_files/static/images/censoring_files/censoring_15_0.png){fig-align="center" width="700"}

::: footer
[Bayesian Censoring Data Modeling](https://juanitorduz.github.io/censoring/)
:::

##

![](probabilistic_forecasting_files/static/images/censoring_files/censoring_26_0.png){fig-align="center" width="600"}

![](probabilistic_forecasting_files/static/images/censoring_files/censoring_28_0.png){fig-align="center" width="700"}

::: footer
[Bayesian Censoring Data Modeling](https://juanitorduz.github.io/censoring/)
:::

## Censored Likelihood

```{.python}
def censored_normal(loc, scale, y, censored):
    distribution = dist.Normal(loc=loc, scale=scale)
    ccdf = 1 - distribution.cdf(y)
    numpyro.sample(
        "censored_label",
        dist.Bernoulli(probs=ccdf).mask(censored == 1),
        obs=censored
    )
    return numpyro.sample("pred", distribution.mask(censored != 1))
```
. . .

Change likelihood distribution in a time-series model:

```{.python code-line-numbers="|7"}
    ## Transition function for AR(2)
    def transition_fn(carry, t):
        y_prev_1, y_prev_2 = carry
        ar_part = phi_1 * y_prev_1 + phi_2 * y_prev_2
        pred_mean = mu + ar_part + seasonal[t]
        # Censored likelihood
        pred = censored_normal(pred_mean, sigma, y[t], censored[t])
        return (pred, y_prev_1), pred
```
::: footer
[Demand Forecasting with Censored Likelihood](https://juanitorduz.github.io/demand/)
:::

## Censored Time Series Forecast üí°

![](probabilistic_forecasting_files/static/images/demand_files/demand_48_0.png){fig-align="center" width="1000"}

::: footer
[Demand Forecasting with Censored Likelihood](https://juanitorduz.github.io/demand/)
:::

## Hierarchical Pricing Elasticity Models

::: {.callout-tip appearance="simple"}

![](probabilistic_forecasting_files/static/images/elasticities_files/elasticities_47_0.svg){fig-align="center" width="1000"}

### Idea ü§ì
<span style="font-size: 1.1em;">
Use a hierarchical structure to regularize the demand elasticity parameters.
</span>

:::

::: footer
[Hierarchical Pricing Elasticity Models](https://juanitorduz.github.io/elasticities/)
:::

## Hierarchical Pricing Elasticity Models

![](probabilistic_forecasting_files/static/images/elasticities_files/elasticities_58_0.png){fig-align="center" width="1000"}

::: footer
[Hierarchical Pricing Elasticity Models](https://juanitorduz.github.io/elasticities/)
:::

## Dynamic Time-Series Model

![](probabilistic_forecasting_files/static/images/electricity_forecast_files/electricity_forecast_6_0.png){fig-align="center" width="1000"}

::: footer
[Electricity Demand Forecast: Dynamic Time-Series Model](https://juanitorduz.github.io/electricity_forecast/)
:::

## Dynamic Coefficients

### Hilbert Space Gaussian Processes for Dynamic Coefficients

![](probabilistic_forecasting_files/static/images/electricity_forecast_files/electricity_forecast_27_0.svg){fig-align="center" width="1000"}

::: footer
[Electricity Demand Forecast: Dynamic Time-Series Model](https://juanitorduz.github.io/electricity_forecast/)
:::

## Inferring Effect of Temperature on Electricity Demand

![](probabilistic_forecasting_files/static/images/electricity_forecast_files/electricity_forecast_46_0.png){fig-align="center" width="1000"}

::: footer
[Electricity Demand Forecast: Dynamic Time-Series Model](https://juanitorduz.github.io/electricity_forecast/)
:::

## Calibrating a Demand Model üß™

> Let us assume that we know from domain knowledge that the effect of temperature on demand over 32¬∞C is somehow stable at around a value of 0.13.

![](probabilistic_forecasting_files/static/images/electricity_forecast_with_priors_files/electricity_forecast_with_priors_32_0.png){fig-align="center" width="1000"}

::: footer
[Electricity Demand Forecast: Dynamic Time-Series Model with Prior Calibration](https://juanitorduz.github.io/electricity_forecast_with_priors/)
:::

## MMM Calibration with Lift Tests

![](probabilistic_forecasting_files/static/images/pymc-marketing-lift-1.png){fig-align="center" width="1000"}

::: footer
[PyMC-Marketing: Lift Test Calibration](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_lift_test.html)
:::

## MMM Calibration with Lift Tests

![](probabilistic_forecasting_files/static/images/pymc-marketing-lift-2.svg){fig-align="center" width="1000"}

::: footer
[PyMC-Marketing: Lift Test Calibration](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_lift_test.html)
:::

## References üìö {.smaller}

#### NumPyro Examples

- [Introduction to Stochastic Variational Inference with NumPyro](https://juanitorduz.github.io/intro_svi/) ‚≠ê
- [Bayesian Censoring Data Modeling](https://juanitorduz.github.io/censoring/)
- [Croston's Method for Intermittent Time Series Forecasting in NumPyro](https://juanitorduz.github.io/croston_numpyro/)
- [Demand Forecasting with Censored Likelihood](https://juanitorduz.github.io/demand/)
- [Electricity Demand Forecast: Dynamic Time-Series Model with Prior Calibration](https://juanitorduz.github.io/electricity_forecast_with_priors/)
- [From Pyro to NumPyro: Forecasting Hierarchical Models - Part I](https://juanitorduz.github.io/numpyro_hierarchical_forecasting_1/)
- [From Pyro to NumPyro: Forecasting Hierarchical Models - Part II](https://juanitorduz.github.io/numpyro_hierarchical_forecasting_2/)
- [Hacking the TSB Model for Intermediate Time Series to Accommodate for Availability Constraints](https://juanitorduz.github.io/availability_tsb/)
- [Hierarchical Exponential Smoothing Model](https://juanitorduz.github.io/hierarchical_exponential_smoothing/)
- [Hierarchical Pricing Elasticity Models](https://juanitorduz.github.io/elasticities/)
- [Notes on Exponential Smoothing with NumPyro](https://juanitorduz.github.io/exponential_smoothing_numpyro/)

## References üìö {.smaller}

#### Packages:

- [Nixtla](https://github.com/Nixtla)
- [Prophetverse](https://github.com/felipeangelimvieira/prophetverse)
- [Pyro - Forecasting](https://docs.pyro.ai/en/stable/contrib.forecast.html)
- [Statsmodels - Time Series Models](https://www.statsmodels.org/stable/tsa.html)
- [TimeSeers](https://github.com/MBrouns/timeseers)
- [GluonTS](https://github.com/awslabs/gluonts)
- [Zalando: PyTorchTS](https://github.com/zalandoresearch/pytorch-ts)

## References üìö {.smaller}

#### Other Blogposts

- [Finally! Bayesian Hierarchical Modelling at Scale](https://florianwilhelm.info/2020/10/bayesian_hierarchical_modelling_at_scale/)
- [Modeling Anything With First Principles: Demand under extreme stockouts](https://kylejcaron.github.io/posts/censored_demand/2024-02-06-censored-demand.html)
- [PyMC-Marketing: Lift Test Calibration](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_lift_test.html)
- [PyMC Labs: Unobserved Confounders, ROAS and Lift Tests in Media Mix Models](https://www.pymc-labs.com/blog-posts/mmm_roas_lift/)
- [PyMC Labs: Probabilistic Time Series Analysis - Opportunities and Applications](https://www.pymc-labs.com/blog-posts/probabilistic-forecasting)

#### Books

- [Forecasting: Principles and Practice, the Pythonic Way](https://otexts.com/fpppy/) 
- [Forecasting and Analytics with the Augmented Dynamic Adaptive Model (ADAM)](https://openforecast.org/adam/)

#### Papers

- [A new taxonomy for vector exponential smoothing and its application to seasonal time series](https://www.sciencedirect.com/science/article/pii/S037722172200354X)

- [Demand forecasting under lost sales stock policies](https://www.sciencedirect.com/science/article/abs/pii/S0169207023000961)


## Thank you! {background-image="probabilistic_forecasting_files/static/images/juanitorduz_logo_small.png" background-opacity="0.15"}

[**juanitorduz.github.io**](https://juanitorduz.github.io/)

![](probabilistic_forecasting_files/static/images/juanitorduz.png){.absolute top=0 right=0 width=600 height=600}
